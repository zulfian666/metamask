import { Suite } from 'mocha';
import { Driver } from '../../webdriver/driver';
import {
  withFixtures,
  logInWithBalanceValidation,
  generateGanacheOptions,
} from '../../helpers';
import FixtureBuilder = require('../../fixture-builder');
import { CHAIN_IDS } from '../../../../shared/constants/network';
import { GAS_API_BASE_URL } from '../../../../shared/constants/swaps';
import HomePage from '../../page-objects/pages/home/home-page';
import SendTokenPage from '../../page-objects/pages/send/send-token-page';
import ConfirmTransactionPage from '../../page-objects/pages/confirm-transaction-page';

describe('Gas estimates generated by MetaMask', function (this: Suite) {
  const preLondonGanacheOptions = generateGanacheOptions({
    hardfork: 'berlin',
  });
  const postLondonGanacheOptions = generateGanacheOptions({
    hardfork: 'london',
  });

  describe('Send on a network that is EIP-1559 compatible', function () {
    it('show expected gas defaults', async function () {
      await withFixtures(
        {
          fixtures: new FixtureBuilder().build(),
          ganacheOptions: postLondonGanacheOptions,
          title: this.test?.fullTitle(),
        },
        async ({ driver, ganacheServer }: { driver: Driver; ganacheServer: any }) => {
          await logInWithBalanceValidation(driver, ganacheServer);

          const homePage = new HomePage(driver);
          await homePage.startSendFlow();

          const sendTokenPage = new SendTokenPage(driver);
          await sendTokenPage.fillRecipient('0x2f318C334780961FB129D2a6c30D0763d9a5C970');
          await sendTokenPage.inputAmount('1');
          await sendTokenPage.clickContinue();

          const confirmTransactionPage = new ConfirmTransactionPage(driver);
          await confirmTransactionPage.validateGasFee('0.00043983');
        },
      );
    });

    it('show expected gas defaults when API is down', async function () {
      await withFixtures(
        {
          fixtures: new FixtureBuilder().build(),
          ganacheOptions: postLondonGanacheOptions,
          testSpecificMock: (mockServer) => {
            mockServer
              .forGet(`${GAS_API_BASE_URL}/networks/1337/suggestedGasFees`)
              .thenCallback(() => {
                return {
                  json: {
                    error: 'cannot get gas prices for chain id 1337',
                  },
                  statusCode: 503,
                };
              });
          },
          title: this.test?.fullTitle(),
        },
        async ({ driver, ganacheServer }: { driver: Driver; ganacheServer: any }) => {
          await logInWithBalanceValidation(driver, ganacheServer);

          const homePage = new HomePage(driver);
          await homePage.startSendFlow();

          const sendTokenPage = new SendTokenPage(driver);
          await sendTokenPage.fillRecipient('0x2f318C334780961FB129D2a6c30D0763d9a5C970');
          await sendTokenPage.inputAmount('1');
          await sendTokenPage.clickContinue();

          const confirmTransactionPage = new ConfirmTransactionPage(driver);
          await confirmTransactionPage.validateGasFee('0.00043983');
        },
      );
    });
  });
});
