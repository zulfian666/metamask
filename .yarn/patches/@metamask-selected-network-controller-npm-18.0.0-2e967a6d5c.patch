diff --git a/dist/chunk-D745I7P5.mjs b/dist/chunk-D745I7P5.mjs
index 8bacb2bbdb9b76f46b1fa4fba452d6e97730a5b9..76867410d31260bb00729886b1127a4379adc5b8 100644
--- a/dist/chunk-D745I7P5.mjs
+++ b/dist/chunk-D745I7P5.mjs
@@ -111,19 +111,44 @@ var SelectedNetworkController = class extends BaseController {
     );
     this.messagingSystem.subscribe(
       "NetworkController:stateChange",
-      (availableNetworkClientIds) => {
-        const { selectedNetworkClientId } = this.messagingSystem.call(
-          "NetworkController:getState"
+      ({ selectedNetworkClientId, networkConfigurationsByChainId }, patches) => {
+        const patch = patches.find(
+          ({ op, path }) => (op === "replace" || op === "remove") && path[0] === "networkConfigurationsByChainId"
         );
-        Object.entries(this.state.domains).forEach(
-          ([domain, networkClientIdForDomain]) => {
-            if (!availableNetworkClientIds.includes(networkClientIdForDomain)) {
-              this.setNetworkClientIdForDomain(domain, selectedNetworkClientId);
+        if (patch) {
+          const networkClientIdToChainId = Object.values(
+            networkConfigurationsByChainId
+          ).reduce((acc, network) => {
+            network.rpcEndpoints.forEach(
+              ({ networkClientId }) => acc[networkClientId] = network.chainId
+            );
+            return acc;
+          }, {});
+          Object.entries(this.state.domains).forEach(
+            ([domain, networkClientIdForDomain]) => {
+              const chainIdForDomain = networkClientIdToChainId[networkClientIdForDomain];
+              if (patch.op === "remove" && !chainIdForDomain) {
+                this.setNetworkClientIdForDomain(
+                  domain,
+                  selectedNetworkClientId
+                );
+              } else if (patch.op === "replace") {
+                const updatedChainId = patch.path[1];
+                if (!chainIdForDomain || chainIdForDomain === updatedChainId) {
+                  const network = networkConfigurationsByChainId[updatedChainId];
+                  const { networkClientId: defaultNetworkClientId } = network.rpcEndpoints[network.defaultRpcEndpointIndex];
+                  if (networkClientIdForDomain !== defaultNetworkClientId) {
+                    this.setNetworkClientIdForDomain(
+                      domain,
+                      defaultNetworkClientId
+                    );
+                  }
+                }
+              }
             }
-          }
-        );
-      },
-      selectAvailableNetworkClientIds
+          );
+        }
+      }
     );
     onPreferencesStateChange(({ useRequestQueue }) => {
       if (__privateGet(this, _useRequestQueuePreference) !== useRequestQueue) {
diff --git a/dist/chunk-ZFFMRFO4.js b/dist/chunk-ZFFMRFO4.js
index 676169af52fb09a3aac604d6a3ae869f7666040f..a9e950bc7833e7845546523bc61202b387369e63 100644
--- a/dist/chunk-ZFFMRFO4.js
+++ b/dist/chunk-ZFFMRFO4.js
@@ -111,19 +111,44 @@ var SelectedNetworkController = class extends _basecontroller.BaseController {
     );
     this.messagingSystem.subscribe(
       "NetworkController:stateChange",
-      (availableNetworkClientIds) => {
-        const { selectedNetworkClientId } = this.messagingSystem.call(
-          "NetworkController:getState"
+      ({ selectedNetworkClientId, networkConfigurationsByChainId }, patches) => {
+        const patch = patches.find(
+          ({ op, path }) => (op === "replace" || op === "remove") && path[0] === "networkConfigurationsByChainId"
         );
-        Object.entries(this.state.domains).forEach(
-          ([domain, networkClientIdForDomain]) => {
-            if (!availableNetworkClientIds.includes(networkClientIdForDomain)) {
-              this.setNetworkClientIdForDomain(domain, selectedNetworkClientId);
+        if (patch) {
+          const networkClientIdToChainId = Object.values(
+            networkConfigurationsByChainId
+          ).reduce((acc, network) => {
+            network.rpcEndpoints.forEach(
+              ({ networkClientId }) => acc[networkClientId] = network.chainId
+            );
+            return acc;
+          }, {});
+          Object.entries(this.state.domains).forEach(
+            ([domain, networkClientIdForDomain]) => {
+              const chainIdForDomain = networkClientIdToChainId[networkClientIdForDomain];
+              if (patch.op === "remove" && !chainIdForDomain) {
+                this.setNetworkClientIdForDomain(
+                  domain,
+                  selectedNetworkClientId
+                );
+              } else if (patch.op === "replace") {
+                const updatedChainId = patch.path[1];
+                if (!chainIdForDomain || chainIdForDomain === updatedChainId) {
+                  const network = networkConfigurationsByChainId[updatedChainId];
+                  const { networkClientId: defaultNetworkClientId } = network.rpcEndpoints[network.defaultRpcEndpointIndex];
+                  if (networkClientIdForDomain !== defaultNetworkClientId) {
+                    this.setNetworkClientIdForDomain(
+                      domain,
+                      defaultNetworkClientId
+                    );
+                  }
+                }
+              }
             }
-          }
-        );
-      },
-      _networkcontroller.selectAvailableNetworkClientIds
+          );
+        }
+      }
     );
     onPreferencesStateChange(({ useRequestQueue }) => {
       if (__privateGet(this, _useRequestQueuePreference) !== useRequestQueue) {
